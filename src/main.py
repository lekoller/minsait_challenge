# -*- coding: utf-8 -*-
"""Testes_challenge_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WtE18zbJR3IszQLBgM1TStK25qwlLc4G
"""
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import pingouin as pg
import random as rd
from scipy import stats as st
from sklearn.model_selection import train_test_split

from utils.clean_key import clean_key
from utils.clean_value import clean_value
from persistence.repository import GenericRepository

repository = GenericRepository('minsait_challenge', 'credito_rural')

dados_credito_safra_20_21 = pd.read_excel('credito-rural-link_safra20-21.xlsx')

num_rows_with_missing = (dados_credito_safra_20_21.isna().sum(axis=1) > 0).sum()

df = dados_credito_safra_20_21.dropna()

print("se livrando de", num_rows_with_missing, "linhas com valores faltantes (missings)")

list_of_dicts = df.to_dict(orient='records')


new_list_of_dicts = [{clean_key(key): clean_value(value) for key, value in item.items()} for item in list_of_dicts]

repository.insert_many_documents(new_list_of_dicts)


#####################################

# dados_credito_safra_20_21_filtrado.shape

# dados_credito_safra_20_21_filtrado.describe()

# dados_credito_safra_20_21_filtrado.head(3)

# dados_credito_safra_20_21_filtrado['Linha/Programa'].value_counts().to_frame()



# dados_credito_safra_20_21_filtrado['Agente Financeiro'].value_counts().to_frame()

# dados_credito_safra_20_21_filtrado['Tipo de Agricultura'].value_counts().to_frame()

# dados_credito_safra_20_21_filtrado['Beneficiários'].value_counts().to_frame()

# dados_credito_safra_20_21_filtrado['Estado'].value_counts().to_frame()

# dados_credito_safra_20_21_filtrado['Região'].value_counts().to_frame()

# dados_credito_safra_20_21_filtrado['Nº de Operações'].value_counts().to_frame()

# """## ESTATISTICAS EM RELAÇÃO À REGIÃO DO PAÍS:"""

# #calculo de moda dos valores aprovados por região:
# dados_credito_safra_20_21_filtrado.groupby('Região')['Valor Aprovado R$'].apply(lambda x: x.mode().iloc[0]).to_frame().reset_index()

# #calculo de maximo, minimo e media dos valores aprovados por região:
# dados_credito_safra_20_21_filtrado.groupby('Região').agg(min_idh = pd.NamedAgg('Valor Aprovado R$', 'min'),max_idh = pd.NamedAgg('Valor Aprovado R$', 'max'),media_idh = pd.NamedAgg('Valor Aprovado R$', 'mean')).reset_index()

# #calculo das medianas dos valores aprovados por região:
# dados_credito_safra_20_21_filtrado.groupby('Região').agg(median_idh = pd.NamedAgg('Valor Aprovado R$', 'median')).reset_index()

# #calculo dos quartis dos valores aprovados por região:
# dados_credito_safra_20_21_filtrado.groupby('Região')['Valor Aprovado R$'].apply(lambda x: x.quantile([0.25, 0.5, 0.75])).to_frame().reset_index().rename(columns={'level_1': 'quartil'})

# #calculo de variacia e desvio padrão dos valores aprovados por região:
# dados_credito_safra_20_21_filtrado.groupby('Região').agg(variancia_idh = pd.NamedAgg('Valor Aprovado R$', 'var'),dp_idh = pd.NamedAgg('Valor Aprovado R$', 'std')).reset_index()

# """## ESTATISTICAS EM RELAÇÃO AO TIPO DE AGRICULTURA:"""

# #calculo de moda dos valores aprovados por tipo de agricultura:
# dados_credito_safra_20_21_filtrado.groupby('Tipo de Agricultura')['Valor Aprovado R$'].apply(lambda x: x.mode().iloc[0]).to_frame().reset_index()

# #calculo de maximo, minimo e media dos valores aprovados por tipo de agricultura:
# dados_credito_safra_20_21_filtrado.groupby('Tipo de Agricultura').agg(min_idh = pd.NamedAgg('Valor Aprovado R$', 'min'),max_idh = pd.NamedAgg('Valor Aprovado R$', 'max'),media_idh = pd.NamedAgg('Valor Aprovado R$', 'mean')).reset_index()

# #calculo das medianas dos valores aprovados por tipo de agricultura:
# dados_credito_safra_20_21_filtrado.groupby('Tipo de Agricultura').agg(median_idh = pd.NamedAgg('Valor Aprovado R$', 'median')).reset_index()

# #calculo dos quartis dos valores aprovados por tipo de agricultura:
# dados_credito_safra_20_21_filtrado.groupby('Tipo de Agricultura')['Valor Aprovado R$'].apply(lambda x: x.quantile([0.25, 0.5, 0.75])).to_frame().reset_index().rename(columns={'level_1': 'quartil'})

# #calculo de variacia e desvio padrão dos valores aprovados por tipo de agricultura:
# dados_credito_safra_20_21_filtrado.groupby('Tipo de Agricultura').agg(variancia_idh = pd.NamedAgg('Valor Aprovado R$', 'var'),dp_idh = pd.NamedAgg('Valor Aprovado R$', 'std')).reset_index()

# """## ESTATISTICAS EM RELAÇÃO AO TIPO DE LINHA/PROGRAMA:"""

# #calculo de moda dos valores aprovados por tipo linha/programa:
# dados_credito_safra_20_21_filtrado.groupby('Linha/Programa')['Valor Aprovado R$'].apply(lambda x: x.mode().iloc[0]).to_frame().reset_index()

# #calculo de maximo, minimo e media dos valores aprovados por tipo linha/programa:
# dados_credito_safra_20_21_filtrado.groupby('Linha/Programa').agg(min_idh = pd.NamedAgg('Valor Aprovado R$', 'min'),max_idh = pd.NamedAgg('Valor Aprovado R$', 'max'),media_idh = pd.NamedAgg('Valor Aprovado R$', 'mean')).reset_index()

# #calculo das medianas dos valores aprovados por tipo linha/programa:
# dados_credito_safra_20_21_filtrado.groupby('Linha/Programa').agg(median_idh = pd.NamedAgg('Valor Aprovado R$', 'median')).reset_index()

# #calculo de variacia e desvio padrão dos valores aprovados por tipo linha/programa:
# dados_credito_safra_20_21_filtrado.groupby('Linha/Programa').agg(variancia_idh = pd.NamedAgg('Valor Aprovado R$', 'var'),dp_idh = pd.NamedAgg('Valor Aprovado R$', 'std')).reset_index()